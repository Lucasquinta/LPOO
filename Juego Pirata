#include <iostream>
#include <cstdlib>
#include <ctime>
#include <windows.h>

#define N_MAX 20

using namespace std;

char tablero[N_MAX][N_MAX];
int filas = 0, columnas = 0;
int x_pirata, y_pirata, x_tesoro, y_tesoro;
int movimiento = 0;  // Movement counter

void inicializarTablero();
void dibujarTablero();
void BuscarTesoro();
int generarNumeroAleatorio(int min, int max);
void setColor(int textColor, int bgColor);

int main() {
    srand(time(NULL));  // Initialize random number generator
    
    int opcion;
    char jugar_nuevamente;
    
    do {
        cout << "\n--- Menú ---\n";
        cout << "1. Inicializar Tablero\n";
        cout << "2. Dibujar Tablero\n";
        cout << "3. Buscar Tesoro\n";
        cout << "4. Salir\n";
        cout << "Ingrese una opcion: ";
        cin >> opcion;
        
        switch (opcion) {
            case 1:
                cout << "Teniendo en cuenta que el agua te va a sacar 2 filas y 2 columnas\n";
                cout << "Ingrese las dimensiones del tablero (maximo " << N_MAX << "): ";
                cin >> filas;
                columnas = filas;
                inicializarTablero();
                cout << "Tablero inicializado.\n";
                break;
            case 2:
                dibujarTablero();
                break;
            case 3:
                BuscarTesoro();
                if (tablero[x_pirata][y_pirata] == 'T') {
                    cout << "¡Encontraste el Gran Tesoro!\n";
                    cout << "¿Desea jugar nuevamente? (s/n): ";
                    cin >> jugar_nuevamente;
                    if (jugar_nuevamente == 's' || jugar_nuevamente == 'S') {
                        inicializarTablero(); // Restart the game
                        opcion = 0; // Reset the menu
                    }
                }
                break;
            case 4:
                cout << "Saliendo del programa.\n";
                break;
            default:
                cout << "Opción inválida. Intente nuevamente.\n";
                break;
        }
    } while (opcion != 4);
    
    return 0;
}

void inicializarTablero() {
    if (filas <= 4 || filas > N_MAX || columnas <= 4 || columnas > N_MAX) {
        cout << "Dimensiones inválidas. Deben ser mayores que 4 y menores o iguales a " << N_MAX << ".\n";
        return;
    }
    
    // Reset movement counter
    movimiento = 0;

    // Fill the board with water
    for (int i = 0; i < filas; i++) {
        for (int j = 0; j < columnas; j++) {
            if (i == 0 || j == 0 || i == filas - 1 || j == columnas - 1) {
                tablero[i][j] = '~';  // Water on the edges
            } else {
                tablero[i][j] = ' ';  // Empty space inside
            }
        }
    }
    
    // Place bridges in the corners
    tablero[0][columnas - 1] = ' ';
    tablero[filas - 1][0] = ' ';
    
    // Place the pirate and the treasure in random positions
    x_pirata = generarNumeroAleatorio(1, filas - 2);
    y_pirata = generarNumeroAleatorio(1, columnas - 2);
    tablero[x_pirata][y_pirata] = 'P';
    
    do {
        x_tesoro = generarNumeroAleatorio(1, filas - 2);
        y_tesoro = generarNumeroAleatorio(1, columnas - 2);
    } while (x_tesoro == x_pirata && y_tesoro == y_pirata);
}

void dibujarTablero() {
    cout << "\nGuia del juego:\nEl agua es ~ y el puente es O\n";
    cout << "Movimientos: " << movimiento << "\n";  // Display movement counter
    if (filas <= 0 || filas > N_MAX || columnas <= 0 || columnas > N_MAX) {
        cout << "El tablero no ha sido inicializado correctamente.\n";
        return;
    }

    for (int i = 0; i < filas; i++) {
        for (int j = 0; j < columnas; j++) {
            if (i == x_tesoro && j == y_tesoro) {
                setColor(14, 14); // Background color sand, text color sand (treasure invisible)
                cout << " ";
            } else {
                switch (tablero[i][j]) {
                    case '~':
                        setColor(11, 1); // Light blue text, blue background
                        cout << "~";
                        break;
                    case 'P':
                        setColor(14, 0); // Yellow text, black background
                        cout << "P";
                        break;
                    case ' ':
                        if ((i == 0 && j == columnas - 1) || (i == filas - 1 && j == 0)) {
                            setColor(0, 6); // Dark brown background for bridges
                            cout << " ";
                        } else {
                            setColor(7, 14); // White text, sand background
                            cout << " ";
                        }
                        break;
                    case 'X':
                        setColor(15, 14); // White text, sand background
                        cout << " ";
                        break;
                    default:
                        setColor(7, 14); // Default white text, sand background
                        cout << tablero[i][j];
                        break;
                }
            }
            setColor(7, 0); // Reset to white after each character
        }
        cout << "\n";
    }
}

void BuscarTesoro() {
    char direccion;
    
    if (filas <= 0 || filas > N_MAX || columnas <= 0 || columnas > N_MAX) {
        cout << "El tablero no ha sido inicializado correctamente.\n";
        return;
    }
    
    do {
        cout << "Ingrese la dirección (w, a, s, d): ";
        cin >> direccion;
        
        int dx = 0, dy = 0;
        
        switch (direccion) {
            case 'a':
                dy = -1;
                break;
            case 'd':
                dy = 1;
                break;
            case 's':
                dx = 1;
                break;
            case 'w':
                dx = -1;
                break;
            default:
                cout << "Dirección inválida. Intente nuevamente.\n";
                continue;
        }
        
        // Check if the movement is valid
        int nueva_x = x_pirata + dx;
        int nueva_y = y_pirata + dy;
        if (nueva_x >= 0 && nueva_x < filas && nueva_y >= 0 && nueva_y < columnas) {
            // Clear the previous position of the pirate
            tablero[x_pirata][y_pirata] = 'X';
            // Move the pirate to the new position
            x_pirata = nueva_x;
            y_pirata = nueva_y;
            // Check if the pirate falls into the water
            if (tablero[x_pirata][y_pirata] == '~') {
                dibujarTablero();
                cout << "¡El pirata ha caído al agua y ha muerto!\n";
                break;
            }
            tablero[x_pirata][y_pirata] = 'P';
            movimiento++;  // Increment the movement counter
        } else {
            cout << "Movimiento inválido. Intente nuevamente.\n";
            continue;
        }
        
        dibujarTablero();
        
        if (tablero[x_pirata][y_pirata] == 'T') {
            cout << "¡Encontraste el Gran Tesoro!\n";
            break;
        } else if (tablero[x_pirata][y_pirata] == 'P' && x_pirata == x_tesoro && y_pirata == y_tesoro) {
            cout << "¡Has encontrado el tesoro!\n";
            break;
        }
        
        if (movimiento >= 50) {
            cout << "Has alcanzado el límite de movimientos. No has encontrado el tesoro.\n";
            break;
        }
        
    } while (true);
}

int generarNumeroAleatorio(int min, int max) {
    return min + rand() % (max - min + 1);
}

void setColor(int textColor, int bgColor) {
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, (bgColor << 4) | textColor);
}
